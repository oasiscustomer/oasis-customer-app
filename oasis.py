# -*- coding: utf-8 -*-
"""oasis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUOTH4v8fMMkpnmogHbSc6nku2ox3wFT
"""

# -*- coding: utf-8 -*-
"""
oasis.py - 세차장 고객 관리 시스템 (Streamlit WebApp)
"""

import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pytz
import re
import json

# ✅ 인증 처리
try:
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
except Exception as e:
    st.error("❌ 인증 실패: secrets 설정을 확인하세요.")
    st.stop()

# ✅ Google Sheets 연동
try:
    client = gspread.authorize(credentials)
    worksheet = client.open("Oasis Customer Management").worksheet("시트1")
except Exception as e:
    st.error(f"🚨 Google Sheets 연결 실패: {e}")
    st.stop()

# ✅ 타이틀
st.markdown("""
<div style='text-align: center;'>
    <h3>🚗 세차장 고객 관리 시스템</h3>
</div>
""", unsafe_allow_html=True)

# ✅ 세션 상태 초기화
if "search_done" not in st.session_state:
    st.session_state.search_done = False
if "matched_result" not in st.session_state:
    st.session_state.matched_result = []
if "selected_plate" not in st.session_state:
    st.session_state.selected_plate = None
if "customer_data" not in st.session_state:
    st.session_state.customer_data = None
if "allow_duplicate" not in st.session_state:
    st.session_state.allow_duplicate = None

# ✅ 현재 시간 (KST)
kst = pytz.timezone("Asia/Seoul")
now = datetime.now(kst)
today = now.strftime("%Y-%m-%d")
timestamp = now.strftime("%Y-%m-%d %H:%M")

# ✅ 고객 차량 정보 입력
st.subheader("2️⃣ 고객 차량 정보 입력")
plate_input = st.text_input("🔎 차량 번호 (전체 또는 끝 4자리)")
search_btn = st.button("🔍 확인")

if search_btn and plate_input:
    try:
        records = worksheet.get_all_records()
        matched = []
        for r in records:
            if not isinstance(r, dict):
                continue
            plate_number = str(r.get("차량번호", ""))
            if plate_input in plate_number or plate_number.endswith(plate_input):
                matched.append(r)

        st.session_state.search_done = True
        st.session_state.matched_result = matched
        st.session_state.selected_plate = None
        st.session_state.allow_duplicate = None

    except Exception as e:
        st.error(f"데이터 조회 오류: {e}")
        st.stop()

if st.session_state.search_done:
    matched = st.session_state.matched_result

    if len(matched) > 1 and not st.session_state.selected_plate:
        st.warning("🚗 여러 고객이 있습니다. 선택하세요")
        options = [r["차량번호"] for r in matched]
        selected_plate = st.selectbox("차량번호 선택", options)
        if selected_plate:
            st.session_state.selected_plate = selected_plate
            st.session_state.customer_data = next((r for r in matched if r["차량번호"] == selected_plate), None)

    elif len(matched) == 1:
        st.session_state.customer_data = matched[0]

    elif len(matched) == 0:
        st.info("🆕 등록되지 않은 차량입니다. 아래 정보를 입력해 주세요.")
        full_plate = st.text_input("🚘 전체 차량번호")
        phone_input = st.text_input("📞 고객 전화번호")
        if full_plate and phone_input:
            all_records = worksheet.get_all_records()
            already_registered = any(full_plate == r.get("차량번호", "") for r in all_records)
            if already_registered:
                st.warning("🚨 이미 등록된 차량번호입니다. 그래도 등록할까요?")
                dup_check = st.radio("중복 등록 확인", ["Y", "N"], key="new_confirm")
                if dup_check == "Y":
                    if st.button("📥 강제 신규 등록"):
                        new_row = [full_plate, phone_input, today, today, 1, f"{timestamp} (1)"]
                        worksheet.append_row(new_row)
                        st.success("✅ 신규 고객 강제 등록 완료")
                        st.session_state.search_done = False
                else:
                    st.stop()
            else:
                if st.button("📥 신규 고객 등록"):
                    new_row = [full_plate, phone_input, today, today, 1, f"{timestamp} (1)"]
                    worksheet.append_row(new_row)
                    st.success("✅ 신규 고객 등록 완료")
                    st.session_state.search_done = False
        st.stop()

    # ✅ 중복 방문 체크
    customer = st.session_state.customer_data
    if customer:
        last_log = str(customer.get("방문기록", ""))
        if today in last_log and st.session_state.allow_duplicate is None:
            st.info("📌 오늘 이미 입력된 기록이 있습니다. 추가로 입력할까요?")
            dup_confirm = st.radio("입력 확인", ["Y", "N"], key="visit_confirm")
            if st.button("✅ 확인"):
                if dup_confirm == "Y":
                    st.session_state.allow_duplicate = True
                else:
                    st.session_state.allow_duplicate = False

        if st.session_state.allow_duplicate is True or today not in last_log:
            try:
                all_rows = worksheet.get_all_records()
                row_idx = next(i + 2 for i, r in enumerate(all_rows) if r.get("차량번호") == customer["차량번호"])
                new_count = int(customer.get("총 방문 횟수", 0)) + 1
                new_log = last_log + f", {timestamp} (1)" if last_log else f"{timestamp} (1)"

                worksheet.update(f"D{row_idx}", today)
                worksheet.update(f"E{row_idx}", new_count)
                worksheet.update(f"F{row_idx}", new_log)
                st.success("🗓 방문 정보가 성공적으로 기록되었습니다.")
                st.session_state.search_done = False
            except Exception as e:
                st.error(f"❌ 업데이트 실패: {e}")

        elif st.session_state.allow_duplicate is False:
            st.info("🚫 입력이 취소되었습니다.")