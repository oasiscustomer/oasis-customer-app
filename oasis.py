# -*- coding: utf-8 -*-
"""oasis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUOTH4v8fMMkpnmogHbSc6nku2ox3wFT
"""

# -*- coding: utf-8 -*-
"""
oasis.py

Streamlit 고객 차량 관리 시스템 (중복 고객 체크 + 하루 2회 이상 방문 시 사용자 확인)
"""

import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import re
import json

# ✅ credentials 로드 함수
@st.cache_resource
def load_credentials():
    try:
        return Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        )
    except Exception:
        st.subheader("🔑 Google Sheets API 키 업로드 (Colab 전용)")
        uploaded_key = st.file_uploader("JSON 키 파일 업로드", type=["json"])
        if uploaded_key is not None:
            try:
                info = json.load(uploaded_key)
                return Credentials.from_service_account_info(
                    info,
                    scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
                )
            except Exception as e:
                st.error(f"🚨 키 파일 오류: {e}")
                st.stop()
        else:
            st.warning("⛔ 키 파일을 업로드해야 앱이 작동합니다.")
            st.stop()

# ✅ 인증 및 시트 연결
credentials = load_credentials()
if credentials is None:
    st.error("🚫 인증 실패: credentials 값이 None입니다.")
    st.stop()

try:
    client = gspread.authorize(credentials)
    worksheet = client.open("Oasis Customer Management").worksheet("시트1")
except Exception as e:
    st.error(f"🚨 Google Sheets 연결 오류: {e}")
    st.stop()

# ✅ 세션 상태 초기화
if "search_done" not in st.session_state:
    st.session_state.search_done = False
if "matched_customers" not in st.session_state:
    st.session_state.matched_customers = []
if "selected_customer" not in st.session_state:
    st.session_state.selected_customer = None
if "confirm_repeat" not in st.session_state:
    st.session_state.confirm_repeat = False
if "new_registration" not in st.session_state:
    st.session_state.new_registration = False

st.title("🚗 세차장 고객 관리 시스템")
st.markdown("""
📌 **Google Sheets 연동**
📌 **고객 차량 번호 입력 시 중복 확인**
📌 **하루 중복 방문 시 사용자 재확인**
""")

# ✅ 고객 차량 번호 입력
st.subheader("2️⃣ 고객 차량 정보 입력")
plate_input = st.text_input("🔍 차량 번호 (전체 또는 끝 4자리)")
search = st.button("🔎 확인")

if search and plate_input:
    records = worksheet.get_all_records()
    matched = [r for r in records if isinstance(r, dict) and (plate_input in r.get("차량번호", "") or r.get("차량번호", "").endswith(plate_input))]
    st.session_state.search_done = True
    st.session_state.matched_customers = matched
    st.session_state.selected_customer = None
    st.session_state.confirm_repeat = False

if st.session_state.search_done:
    matched = st.session_state.matched_customers
    if len(matched) == 1:
        customer = matched[0]
        st.session_state.selected_customer = customer
    elif len(matched) > 1:
        options = [r['차량번호'] for r in matched if '차량번호' in r]
        selected_plate = st.selectbox("🚗 동일한 차량번호 4자리가 여러 개입니다. 전체 차량번호를 선택하세요:", options)
        customer = next((r for r in matched if r['차량번호'] == selected_plate), None)
        st.session_state.selected_customer = customer
    else:
        st.session_state.new_registration = True

# ✅ 기존 고객 처리
if st.session_state.selected_customer:
    customer = st.session_state.selected_customer
    st.success("✅ 기존 고객 확인됨. 방문 기록을 자동으로 업데이트합니다.")
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    date_today = now.split()[0]
    all_records = worksheet.get_all_records()
    row_index = next((i + 2 for i, r in enumerate(all_records) if r.get("차량번호") == customer['차량번호']), None)
    old_log = customer.get("방문기록", "")
    if date_today in old_log:
        st.info("📌 오늘 이미 입력된 기록이 있습니다. 추가로 입력할까요?")
        confirm = st.radio("입력 확인", ["Y", "N"], key="confirm_input")
        if st.button("✅ 확인"):
            if confirm == "Y":
                worksheet.update_cell(row_index, 4, date_today)
                worksheet.update_cell(row_index, 5, int(customer.get("총 방문 횟수", 0)) + 1)
                new_log = old_log + f", {now} (1)"
                worksheet.update_cell(row_index, 6, new_log)
                st.success("📅 방문 정보가 성공적으로 추가 입력되었습니다.")
            else:
                st.info("❌ 입력이 취소되었습니다.")
    else:
        worksheet.update_cell(row_index, 4, date_today)
        worksheet.update_cell(row_index, 5, int(customer.get("총 방문 횟수", 0)) + 1)
        new_log = old_log + f", {now} (1)" if old_log else f"{now} (1)"
        worksheet.update_cell(row_index, 6, new_log)
        st.success("📅 방문 정보가 성공적으로 입력되었습니다.")

# ✅ 신규 고객 등록
if st.session_state.new_registration:
    st.info("🆕 등록되지 않은 차량입니다. 아래에 고객 정보를 입력해 주세요.")
    full_plate = st.text_input("🚘 전체 차량번호 (예: 160호 7421)", key="new_plate")
    raw_phone = st.text_input("📞 고객 전화번호 (예: 01042921289 또는 010-4292-1289)", key="new_phone")
    register_btn = st.button("📥 신규 고객 등록")

    def format_phone(phone):
        digits = re.sub(r'[^0-9]', '', phone)
        if len(digits) == 11:
            return f"{digits[:3]}-{digits[3:7]}-{digits[7:]}"
        return phone

    if register_btn and full_plate and raw_phone:
        all_records = worksheet.get_all_records()
        if any(r.get("차량번호") == full_plate for r in all_records):
            st.warning("🚨 이미 동일한 차량번호가 등록되어 있습니다. 등록을 중단합니다.")
        else:
            phone = format_phone(raw_phone)
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            date_only = now.split()[0]
            new_row = [full_plate, phone, date_only, date_only, 1, f"{now} (1)"]
            worksheet.append_row(new_row)
            st.success(f"✅ 신규 고객 등록 완료: {full_plate}")
            st.session_state.search_done = False