# -*- coding: utf-8 -*-
"""oasis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUOTH4v8fMMkpnmogHbSc6nku2ox3wFT
"""

import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pytz

# ✅ 한국 시간대 설정
tz = pytz.timezone("Asia/Seoul")
now = datetime.now(tz)
today = now.strftime("%Y-%m-%d")
now_str = now.strftime("%Y-%m-%d %H:%M")

# ✅ Google 인증
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
credentials = Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=scopes
)
client = gspread.authorize(credentials)
worksheet = client.open("Oasis Customer Management").sheet1

# ✅ 전화번호 포맷 함수
def format_phone_number(phone: str) -> str:
    phone = phone.replace("-", "").strip()
    if len(phone) == 11 and phone.startswith("010"):
        return f"{phone[:3]}-{phone[3:7]}-{phone[7:]}"
    elif len(phone) == 10:
        return f"{phone[:3]}-{phone[3:6]}-{phone[6:]}"
    else:
        return phone

# ✅ UI 타이틀
st.markdown("<h1 style='text-align: center; font-size: 22px;'>🚗 세차장 고객 관리 시스템</h1>", unsafe_allow_html=True)
st.markdown("<h4>2️⃣ 고객 차량 정보 입력</h4>", unsafe_allow_html=True)

# ✅ 세션 상태 초기화
if "matched_customers" not in st.session_state:
    st.session_state.matched_customers = []
if "input_plate_value" not in st.session_state:
    st.session_state.input_plate_value = ""
if "selected_plate" not in st.session_state:
    st.session_state.selected_plate = None

# ✅ 차량 번호 검색 Form
with st.form("search_form"):
    plate_input = st.text_input("🔎 차량 번호 (전체 또는 끝 4자리)", key="search_plate")
    search_submit = st.form_submit_button("🔍 확인")
    if search_submit:
        st.session_state.input_plate_value = plate_input

# ✅ 차량번호 검색 및 기존 고객 조회
records = worksheet.get_all_records()
matched = []
if st.session_state.input_plate_value:
    matched = [
        r for r in records
        if st.session_state.input_plate_value in str(r.get("차량번호", "")) or
           str(r.get("차량번호", "")).endswith(st.session_state.input_plate_value)
    ]
    st.session_state.matched_customers = matched

# ✅ 기존 고객 선택 UI
selected_plate = None
if matched:
    plate_options = [r["차량번호"] for r in matched]
    selected_plate = st.selectbox("📋 전체 차량번호 중에서 선택하세요", plate_options)
    st.session_state.selected_plate = selected_plate

# ✅ 기존 고객 처리 로직
if selected_plate:
    customer = next((r for r in records if r["차량번호"] == selected_plate), None)
    if customer:
        visit_log = customer.get("방문기록", "")
        row_idx = next((i + 2 for i, r in enumerate(records) if r["차량번호"] == selected_plate), None)
        if today in visit_log:
            st.info("📌 오늘 이미 입력된 기록이 있습니다. 추가로 입력할까요?")
            choice = st.radio("입력 확인", ["Y", "N"], key="repeat_choice")
            if st.button("✅ 확인"):
                if choice == "Y" and row_idx:
                    try:
                        prev_count = int(customer.get("총 방문 횟수", 0))
                        new_count = prev_count + 1
                        new_log = f"{visit_log}, {now_str} (1)"
                        worksheet.update(f"D{row_idx}", [[today]])
                        worksheet.update(f"E{row_idx}", [[new_count]])
                        worksheet.update(f"F{row_idx}", [[new_log]])
                        st.success("🗓 방문 정보가 성공적으로 추가되었습니다.")
                        st.rerun()
                    except Exception as e:
                        st.error(f"❌ 업데이트 실패: {e}")
                else:
                    st.stop()
        else:
            if row_idx:
                try:
                    prev_count = int(customer.get("총 방문 횟수", 0))
                    new_count = prev_count + 1
                    new_log = f"{visit_log}, {now_str} (1)" if visit_log else f"{now_str} (1)"
                    worksheet.update(f"D{row_idx}", [[today]])
                    worksheet.update(f"E{row_idx}", [[new_count]])
                    worksheet.update(f"F{row_idx}", [[new_log]])
                    st.success("🗓 방문 정보가 성공적으로 추가되었습니다.")
                    st.rerun()
                except Exception as e:
                    st.error(f"❌ 업데이트 실패: {e}")

# ✅ 항상 표시되는 신규 등록 UI
st.markdown("---")
st.markdown("🆕 신규 고객 차량 정보 입력")
with st.form("register_form_always"):
    new_plate_input = st.text_input("🚘 전체 차량번호")
    new_phone_input = st.text_input("📞 고객 전화번호")
    register_submit = st.form_submit_button("📥 신규 고객 등록")

    if register_submit and new_plate_input and new_phone_input:
        all_records = worksheet.get_all_records()
        exists = any(r["차량번호"] == new_plate_input for r in all_records)
        formatted_phone = format_phone_number(new_phone_input)
        if exists:
            st.warning("🚨 이미 등록된 차량번호입니다.")
        else:
            try:
                new_row = [new_plate_input, formatted_phone, today, today, 1, f"{now_str} (1)"]
                worksheet.append_row(new_row)
                st.success("✅ 신규 고객 등록 완료")
                st.rerun()
            except Exception as e:
                st.error(f"❌ 등록 실패: {e}")