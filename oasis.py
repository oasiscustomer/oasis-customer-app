# -*- coding: utf-8 -*-
"""oasis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUOTH4v8fMMkpnmogHbSc6nku2ox3wFT
"""

# -*- coding: utf-8 -*-
"""
oasis.py - 세차장 고객 관리 시스템 (Streamlit WebApp)
- Google Sheets 연동
- 고객 차량 번호 입력 시 중복 확인
- 하루 중복 방문 시 사용자 재확인
- KST(한국 표준시) 적용
"""

import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pytz
import re
import json

# ✅ KST 타임존 설정
def get_kst_now():
    return datetime.now(pytz.timezone("Asia/Seoul"))

# ✅ Google 인증 처리
def load_credentials():
    try:
        return Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    except Exception:
        st.subheader("🔑 Google Sheets API 키 업로드 (Colab 전용)")
        uploaded_key = st.file_uploader("JSON 키 파일 업로드", type=["json"])
        if uploaded_key is not None:
            try:
                info = json.load(uploaded_key)
                return Credentials.from_service_account_info(
                    info,
                    scopes=[
                        "https://www.googleapis.com/auth/spreadsheets",
                        "https://www.googleapis.com/auth/drive"
                    ]
                )
            except Exception as e:
                st.error(f"🚨 키 파일 오류: {e}")
                st.stop()
        else:
            st.warning("⛔ 키 파일을 업로드해야 앱이 작동합니다.")
            st.stop()
    return None

credentials = load_credentials()
if credentials is None:
    st.error("🚫 인증 실패: credentials 값이 None입니다.")
    st.stop()

# ✅ Google Sheets 연결
try:
    client = gspread.authorize(credentials)
    worksheet = client.open("Oasis Customer Management").worksheet("시트1")
except Exception as e:
    st.error(f"🚨 Google Sheets 연결 실패: {e}")
    st.stop()

# ✅ UI
st.title("🚗 세차장 고객 관리 시스템")
st.markdown("""
- Google Sheets 연동
- 고객 차량 번호 입력 시 중복 확인
- 하루 중복 방문 시 사용자 재확인
""")

st.subheader("2️⃣ 고객 차량 정보 입력")
plate_input = st.text_input("🔎 차량 번호 (전체 또는 끝 4자리)")
search_button = st.button("🔍 확인")

# ✅ 세션 초기화
if "matched" not in st.session_state:
    st.session_state.matched = []
if "customer" not in st.session_state:
    st.session_state.customer = None
if "selected" not in st.session_state:
    st.session_state.selected = None
if "check_confirmed" not in st.session_state:
    st.session_state.check_confirmed = False
if "allow_insert" not in st.session_state:
    st.session_state.allow_insert = False

# ✅ 차량 검색
if search_button and plate_input:
    records = worksheet.get_all_records()
    matched = [r for r in records if isinstance(r, dict) and "차량번호" in r and (
        plate_input in r["차량번호"] or r["차량번호"].endswith(plate_input))]
    st.session_state.matched = matched
    st.session_state.customer = None
    st.session_state.selected = None
    st.session_state.check_confirmed = False
    st.session_state.allow_insert = False

# ✅ 검색 결과 처리
if st.session_state.matched:
    if len(st.session_state.matched) == 1:
        st.session_state.customer = st.session_state.matched[0]
    else:
        st.info("🚘 여러 고객이 있습니다. 선택하세요")
        options = [r["차량번호"] for r in st.session_state.matched]
        selected_plate = st.selectbox("", options)
        if selected_plate:
            st.session_state.selected = selected_plate
            for r in st.session_state.matched:
                if r["차량번호"] == selected_plate:
                    st.session_state.customer = r
                    break

    customer = st.session_state.customer
    if customer:
        st.success("✅ 기존 고객 확인됨. 방문 기록을 자동으로 업데이트합니다.")
        now = get_kst_now().strftime("%Y-%m-%d %H:%M")
        today = now.split()[0]
        log = customer.get("방문기록", "")

        if today in log:
            st.info("📌 오늘 이미 입력된 기록이 있습니다. 추가로 입력할까요?")
            choice = st.radio("입력 확인", ["Y", "N"])
            if st.button("✅ 확인"):
                if choice == "Y":
                    st.session_state.allow_insert = True
                else:
                    st.warning("❌ 입력이 취소되었습니다.")
        else:
            st.session_state.allow_insert = True

        if st.session_state.allow_insert:
            all_records = worksheet.get_all_records()
            row_idx = next((i + 2 for i, r in enumerate(all_records) if r["차량번호"] == customer["차량번호"]), None)
            if row_idx:
                try:
                    worksheet.update(f"D{row_idx}", [[today]])
                    worksheet.update(f"E{row_idx}", [[int(customer.get("총 방문 횟수", 0)) + 1]])
                    new_log = log + f", {now} (1)" if log else f"{now} (1)"
                    worksheet.update(f"F{row_idx}", [[new_log]])
                    st.success("🗓 방문 정보가 성공적으로 기록되었습니다.")
                except Exception as e:
                    st.error(f"🚨 추가 입력 실패: {e}")
else:
    st.warning("🆕 등록되지 않은 차량입니다. 아래 정보를 입력해 주세요.")
    new_plate = st.text_input("🚘 전체 차량번호", key="new_plate")
    new_phone = st.text_input("📞 고객 전화번호", key="new_phone")
    confirm = st.radio("✅ 신규 고객 등록 확인", ["Y", "N"])
    if st.button("📥 신규 고객 등록"):
        if confirm == "Y":
            all_records = worksheet.get_all_records()
            if any(r["차량번호"] == new_plate for r in all_records):
                st.warning("⚠️ 이미 등록된 차량번호입니다.")
            else:
                now = get_kst_now().strftime("%Y-%m-%d %H:%M")
                today = now.split()[0]
                digits = re.sub(r'[^0-9]', '', new_phone)
                phone = f"{digits[:3]}-{digits[3:7]}-{digits[7:]}" if len(digits) == 11 else new_phone
                new_row = [new_plate, phone, today, today, 1, f"{now} (1)"]
                worksheet.append_row(new_row)
                st.success("✅ 신규 고객 등록 완료")